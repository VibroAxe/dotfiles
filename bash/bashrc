# /etc/skel/.bashrc
#
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !

# -- Improved X11 forwarding through GNU Screen (or tmux).
# If not in screen or tmux, update the DISPLAY cache.
# If we are, update the value of DISPLAY to be that in the cache.
# enable bash completion in interactive shells
# Tie into the DEBUG event to get a zsh-like preexec hook
# A more complete version at: http://glyf.livejournal.com/63106.html
preexec() { :; }    # Default empty function
postexec() { :; }   # Default empty function
preexec_invoke_exec () {
  [ -n "$COMP_LINE" ] && return  # Completing, do nothing
  preexec "$(history 1 | sed -e "s/^[ ]*[0-9]*[ ]*//g")";
}
trap 'preexec_invoke_exec' DEBUG
PROMPT_COMMAND='postexec'

preexec() {
  update-env-forwarding;
}

#magic for x11 forward in screen
function update-env-forwarding
{
    SCREEN_DISPLAY=~/.screen/.display
    SCREEN_SSH_AUTH_SOCK=~/.screen/.ssh_auth_sock
    if [ ! -d "~/.screen" ]; then
      mkdir -p ~/.screen
    fi
    if [ -z "$STY" -a -z "$TMUX" ]; then
		if [ ! -z ${DISPLAY+x} ]; then
	        echo $DISPLAY > $SCREEN_DISPLAY
		fi
    else
		if [ -f "$SCREEN_DISPLAY" ]; then
   	     	export DISPLAY=`cat $SCREEN_DISPLAY`
		fi
    fi
}

function command_not_found_handle {
	# check because c-n-f could've been removed in the meantime

	if [ `which "$1.exe"` ]; then
		echo "Found alternative $1.exe, executing"
		exe="$1.exe"
		shift;
		$exe "$@"
	elif [ `which "$1.sh"` ]; then
		echo "Found alternative $1.sh, executing"
		script="$1.sh"
		shift;
		$script "$@"
	elif [ -x /usr/lib/command-not-found ]; then
		/usr/lib/command-not-found -- "$1"
		return $?
	elif [ -x /usr/share/command-not-found/command-not-found ]; then
		/usr/share/command-not-found/command-not-found -- "$1"
		return $?
	else
		printf "%s: command not found\n" "$1" >&2
		return 127
	fi
}

#Setting up editors
export VISUAL=/usr/bin/vim
export EDITOR=/usr/bin/vim

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

#Load custom PS1, this should look at using magicline
if [ -f ~/.config/liquidprompt/liquidprompt/liquidprompt ]; then
	source ~/.config/liquidprompt/liquidprompt/liquidprompt
else
	PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[01;33m\]$(__git_ps1)\[\033[01;34m\] \$\[\033[00m\] '
	source $HOME/.config/bash/git-prompt.sh
fi


#Source bash completion engine
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

shopt -s histverify


# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
    [ -e "$HOME/.dircolors" ] && DIR_COLORS="$HOME/.dircolors"
    [ -e "$DIR_COLORS" ] || DIR_COLORS=""
    eval "`dircolors -b $DIR_COLORS`"
    alias ls='ls --color=auto'
    alias dir='ls --color=auto --format=vertical'
    alias vdir='ls --color=auto --format=long'
fi

#add pip local to path
PATH="$PATH:~/.local/bin"
export PATH

####################################################
# Put your fun stuff here.                         #
####################################################


####################################################
#update the .config repo before doing anything else#
####################################################

~/.config/bash/updatedots.sh

####################################################
# Load all commands in bashrc.d                   #
####################################################

for f in ~/.config/bash/bashrc.d/*; do source $f; done

####################################################
# Default Aliases                                  #
####################################################

alias apt='sudo apt'
alias apt-get='sudo apt-get'
alias systemctl='sudo systemctl'
alias service='sudo service'
alias svi='sudoedit'
alias reboot='sudo reboot'

####################################################
# Load the bash.local if it exists                 #
####################################################

[[ -f ~/.config/bash/local ]] && source ~/.config/bash/local


####################################################
# Start tmux if $START_TMUX is set in bash/local   #
####################################################

#Start TMUX 
[[ -n "${START_TMUX}" ]] && [[ ! "$TERM" =~ "screen".* ]] && echo "Autostarting Tmux" && tmuxr

